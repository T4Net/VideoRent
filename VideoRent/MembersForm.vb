' ++++++++++++++++++++++++++++++++++++++++++++++++++
' This code is generated by a tool and is provided "as is", without warranty of any kind,
' express or implied, including but not limited to the warranties of merchantability,
' fitness for a particular purpose and non-infringement.
' In no event shall the authors or copyright holders be liable for any claim, damages or
' other liability, whether in an action of contract, tort or otherwise, arising from,
' out of or in connection with the software or the use or other dealings in the software.
' ++++++++++++++++++++++++++++++++++++++++++++++++++
'

Imports System.ComponentModel
Imports System.Data.Objects
Imports VideoRent.Ms.Linq.Dynamic
Imports System.Text.RegularExpressions

'Namespace VideoRent
'Controls are created during the Call To InitializeComponent In the order they appear 
'in the visual tree. A NullReferenceException will be raised in the case of 
'early-created controls With Event handlers, etc. , that fire during InitializeComponent 
'which reference late-created controls.
Public Class MembersForm

    Private entities As video_dbEntities

    Private Sub Form1_Load(sender As System.Object, e As System.EventArgs) Handles MyBase.Load
        Try
            'InitializeComponent() is triggered automatically
            Using entities = New video_dbEntities()
                'Binds data
                MemberBindingSource.DataSource = entities.members.ToList()
                'Sets BindingNavigator controls
                BindingNavigatorAddNewItem.Enabled = True
                BindingNavigatorCountItem.Enabled = False
                BindingNavigatorDeleteItem.Enabled = True
                BindingNavigatorMoveFirstItem.Enabled = True
                BindingNavigatorMovePreviousItem.Enabled = True
                BindingNavigatorPositionItem.Enabled = True
                BindingNavigatorMoveNextItem.Enabled = True
                BindingNavigatorMoveLastItem.Enabled = True
                SaveButton.Enabled = False

                'id column is not meant for editing
                customerDataGridView.Columns(0).ReadOnly = True
                'Loads DataGridView data
                customerDataGridView.DataSource = MemberBindingSource
                'Adds Update button column
                Dim UpdateGridViewButtonColumn As New DataGridViewButtonColumn
                UpdateGridViewButtonColumn.DataPropertyName = "update"
                UpdateGridViewButtonColumn.HeaderText = "Update"
                UpdateGridViewButtonColumn.Name = "UpdateGridViewButtonColumn"
                UpdateGridViewButtonColumn.Text = "Update"
                UpdateGridViewButtonColumn.UseColumnTextForButtonValue = True

                'fit pictures to cell size
                PictureDataGridViewImageColumn.ImageLayout = DataGridViewImageCellLayout.Zoom

                customerDataGridView.Columns.Add(UpdateGridViewButtonColumn)

            End Using
        Catch ex As Exception
            MessageBox.Show(ex.Message)
        End Try

    End Sub

    'Save new member in database
    Private Sub SaveButton_Click(sender As System.Object, e As System.EventArgs) Handles SaveButton.Click
        If Not Me.Validate() Then
            Return
        End If
        Try
            Dim lastRow As Integer = customerDataGridView.Rows.Count - 1
            Dim nextId As Integer
            nextId = CreateNewCustomerID()
            customerDataGridView.Rows(lastRow).Cells(0).Value = nextId
            AddMember(nextId)
            MemberBindingSource.EndEdit()
        Catch ex As Exception
            MessageBox.Show(ex.Message)
        End Try
    End Sub

    Private Function CreateNewCustomerID() As Integer
        Dim newRowForMember As New member
        newRowForMember.firstName = "temp"
        newRowForMember.lastName = "temp"
        Dim ID As Integer
        Try
            Using entities = New video_dbEntities()
                entities.members.Add(newRowForMember)
                entities.SaveChanges()
                'Fetch ID after autoincrement fired on member Table in Database
                ID = (From cust In entities.members
                      Where cust.firstName = "temp"
                      Select cust.memberID).FirstOrDefault
            End Using
        Catch ex As Exception
            MessageBox.Show(ex.Message)
        Finally
            newRowForMember = Nothing
        End Try
        Return ID
    End Function

    Private Sub AddMember(id As Integer)
        Dim lastRow As Integer = customerDataGridView.Rows.Count - 1
        Dim newRow As DataGridViewRow = customerDataGridView.Rows(lastRow)

        If Not IsNothing(id) Then
            Try 'verify input
                If ValidateMember(newRow) Then
                    UpdateDatabase(newRow)
                    SaveButton.Enabled = False
                Else
                    MessageBox.Show("At least one Of the fields contain invalid characters.")
                    RemoveMember(id) 'Rollback temporary changes in database
                    'Reestablish Auto_Increment via SetAutoIncrement Stored Procedure here
                    'https://dev.mysql.com/doc/refman/5.6/en/example-auto-increment.html
                End If
            Catch ex As Exception
                MessageBox.Show(ex.Message)
            End Try
        End If

    End Sub

    ' regular expression pattern to catch potentially harmful input
    Private Function ValidateMember(ByVal newMember As DataGridViewRow) As Boolean

        Dim regExpression As Regex = New System.Text.RegularExpressions.Regex("^[\w\.@-]{1,20}$") 'Regex("^[a-zA-Z0-9.@-]{1,20}$")
        Dim pass As Boolean = False
        Try
            'check each cell in a given row apart from last two columns 
            For i As Integer = 0 To newMember.Cells.Count - 3 ' exclude last two columns with picture and button
                If regExpression.IsMatch(newMember.Cells(i).Value) Then
                    pass = True
                Else
                    Return False
                End If
            Next
        Catch ex As Exception
            MessageBox.Show(ex.Message)
        End Try
        Return pass
    End Function

    Private Sub Form1_FormClosing(sender As System.Object, e As System.Windows.Forms.FormClosingEventArgs) Handles MyBase.FormClosing
        e.Cancel = False
    End Sub

    'Prevents empty rows
    Private Sub customerDataGridView_CellValidating(sender As Object, e As DataGridViewCellValidatingEventArgs)

        Dim s As String
        Dim row As DataGridViewRow = customerDataGridView.Rows(e.RowIndex)
        Dim value As Object = e.FormattedValue
        e.Cancel = False
        row.ErrorText = ""
        If row.IsNewRow Then
            Return
        End If
        If e.ColumnIndex = 0 Then

            Dim v As Integer
            If (TypeOf value Is DBNull) OrElse String.IsNullOrEmpty(value.ToString()) Then
                e.Cancel = True
                row.ErrorText = "The field memberID is required"
                Return
            End If
            s = value.ToString()
            If Not Integer.TryParse(s, v) Then
                e.Cancel = True
                row.ErrorText = "The field memberID must be Integer."
                Return
            End If
        End If
        If e.ColumnIndex = 1 Then

            If (TypeOf value Is DBNull) OrElse String.IsNullOrEmpty(value.ToString()) Then
                e.Cancel = True
                row.ErrorText = "The field firstName is required"
                Return
            End If
        End If
        If e.ColumnIndex = 2 Then

            If (TypeOf value Is DBNull) OrElse String.IsNullOrEmpty(value.ToString()) Then
                e.Cancel = True
                row.ErrorText = "The field lastName is required"
                Return
            End If
        End If
        If e.ColumnIndex = 3 Then

            If (TypeOf value Is DBNull) OrElse String.IsNullOrEmpty(value.ToString()) Then
                e.Cancel = True
                row.ErrorText = "The field city is required"
                Return
            End If
        End If
        If e.ColumnIndex = 4 Then

            If (TypeOf value Is DBNull) OrElse String.IsNullOrEmpty(value.ToString()) Then
                e.Cancel = True
                row.ErrorText = "The field zip is required"
                Return
            End If
        End If
        If e.ColumnIndex = 5 Then

            If (TypeOf value Is DBNull) OrElse String.IsNullOrEmpty(value.ToString()) Then
                e.Cancel = True
                row.ErrorText = "The field street is required"
                Return
            End If
        End If
        If e.ColumnIndex = 6 Then

            If (TypeOf value Is DBNull) OrElse String.IsNullOrEmpty(value.ToString()) Then
                e.Cancel = True
                row.ErrorText = "The field number is required"
                Return
            End If
        End If
        If e.ColumnIndex = 7 Then

            If (TypeOf value Is DBNull) OrElse String.IsNullOrEmpty(value.ToString()) Then
                e.Cancel = True
                row.ErrorText = "The field email is required"
                Return
            End If
        End If
        If e.ColumnIndex = 8 Then

            Dim v As Integer
            If (TypeOf value Is DBNull) OrElse String.IsNullOrEmpty(value.ToString()) Then
                e.Cancel = True
                row.ErrorText = "The field currentlyHiring is required"
                Return
            End If
            s = value.ToString()
            If Not Integer.TryParse(s, v) Then
                e.Cancel = True
                row.ErrorText = "The field currentlyHiring must be Integer."
                Return
            End If
        End If
        If e.ColumnIndex = 9 Then

            Dim v As Double
            If (TypeOf value Is DBNull) OrElse String.IsNullOrEmpty(value.ToString()) Then
                e.Cancel = True
                row.ErrorText = "The field balance is required"
                Return
            End If
            s = value.ToString()
            If Not Double.TryParse(s, v) Then
                e.Cancel = True
                row.ErrorText = "The field balance must be Double."
                Return
            End If
        End If
        If e.ColumnIndex = 10 Then

            If (TypeOf value Is DBNull) OrElse String.IsNullOrEmpty(value.ToString()) Then
                e.Cancel = True
                row.ErrorText = "The field picture is required"
                Return
            End If
        End If
    End Sub

    Private Sub customerDataGridView_DataError(ByVal sender As Object, ByVal e As DataGridViewDataErrorEventArgs)
        customerDataGridView.Rows(e.RowIndex).ErrorText = e.Exception.Message
        e.Cancel = True
    End Sub

    'Add new Row
    Private Sub bindingNavigatorAddNewItem_Click(sender As System.Object, e As System.EventArgs) Handles BindingNavigatorAddNewItem.Click
        Try
            MemberBindingSource.AddNew()
            SaveButton.Enabled = True
        Catch ex As Exception
            MessageBox.Show(ex.Message)
        End Try
    End Sub

    'Select parent row of selected cell
    Friend Sub SelectMember(row As DataGridViewRow, eql As Integer)
        With customerDataGridView
            .CurrentCell = row.Cells(0)
            .Rows(row.Index).Selected = True
        End With
        MemberBindingSource.Position = row.Index - eql
    End Sub

    'Synchronize current position between customerDataGridView and BindingNavigator display
    Private Sub customerDataGridView_CellClick(sender As Object, e As DataGridViewCellEventArgs)
        Me.BindingNavigatorPositionItem.Text = e.RowIndex + 1
    End Sub

    'Select one record below selected in a list
    Private Sub BindingNavigatorMoveNextItem_Click(sender As Object, e As EventArgs) Handles BindingNavigatorMoveNextItem.Click
        Dim currIndex As Integer = customerDataGridView.CurrentCell.RowIndex
        Try
            If currIndex < customerDataGridView.Rows.Count - 1 Then
                Dim nextRow As DataGridViewRow = customerDataGridView.Rows(currIndex + 1)
                SelectMember(nextRow, 1)
            End If
        Catch ex As Exception
            MessageBox.Show(ex.Message)
        End Try
    End Sub

    'Select one record above selected in a list
    Private Sub BindingNavigatorMovePreviousItem_Click(sender As Object, e As EventArgs) Handles BindingNavigatorMovePreviousItem.Click
        Dim currIndex As Integer = customerDataGridView.CurrentCell.RowIndex
        Try
            If currIndex > 0 Then
                Dim preRow As DataGridViewRow = customerDataGridView.Rows(currIndex - 1)
                SelectMember(preRow, -1)
            End If
        Catch ex As Exception
            MessageBox.Show(ex.Message)
        End Try
    End Sub

    'Select first record in a list
    Private Sub BindingNavigatorMoveFirstItem_Click(sender As Object, e As EventArgs) Handles BindingNavigatorMoveFirstItem.Click
        Dim firstRow As DataGridViewRow = customerDataGridView.Rows(0)
        SelectMember(firstRow, -1)
    End Sub

    'Select last record in a list
    Private Sub BindingNavigatorMoveLastItem_Click(sender As Object, e As EventArgs) Handles BindingNavigatorMoveLastItem.Click
        Dim last As Integer = customerDataGridView.Rows.Count - 1
        Dim lastRow As DataGridViewRow = customerDataGridView.Rows(last)
        SelectMember(lastRow, -1)
    End Sub

    'Trigger for DeleteItem control
    Private Sub BindingNavigatorDeleteItem_Click(sender As Object, e As EventArgs) Handles BindingNavigatorDeleteItem.Click
        Dim currIndex As Integer = customerDataGridView.CurrentCell.RowIndex
        Dim memberId As Integer = customerDataGridView.Rows(currIndex).Cells(0).Value
        Dim answer As DialogResult
        Try
            answer = MessageBox.Show("Would you like to remove member with ID " &
                          customerDataGridView.Rows(currIndex).Cells(0).Value & "?", "Delete", MessageBoxButtons.YesNo)
            If answer = DialogResult.Yes Then
                RemoveMember(memberId)
            End If
        Catch ex As Exception
            MessageBox.Show(ex.Message)
        End Try
    End Sub

    'Removes member with specified ID
    Private Sub RemoveMember(memberId As Integer)
        Try
            Using entities = New video_dbEntities()
                Dim deleteCustomer As member
                'set the position of current item in BindingSource from DataGridView and remove that item
                deleteCustomer = entities.members.Where("memberID = @0", memberId).First
                entities.members.Remove(deleteCustomer)
                entities.SaveChanges()
            End Using
            customerDataGridView.Refresh()  ' prompt the grid to update.
            'MemberBindingSource.ResetItem(memberId) ' another way of the above line
        Catch ex As Exception
            MessageBox.Show(ex.Message)
        End Try
    End Sub

    'Trigger for AddPictureButton
    Private Sub AddPictureButton_Click(sender As Object, e As EventArgs) Handles AddPictureButton.Click
            Dim currIndex As Integer = customerDataGridView.CurrentCell.RowIndex
            Dim lastColl As Integer = customerDataGridView.ColumnCount - 1
            Dim answer As DialogResult
        Try
            answer = MessageBox.Show("Would you like to upload picture for member with ID " &
                          customerDataGridView.Rows(currIndex).Cells(0).Value & "?", "Picture", MessageBoxButtons.YesNo)
            If answer = DialogResult.Yes Then
                customerDataGridView.Rows(currIndex).Cells("PictureDataGridViewImageColumn").Value = UploadImage()
                'customerDataGridView(lastColl, currIndex).Value = img
                customerDataGridView.Refresh()
            End If
        Catch ex As Exception
            MessageBox.Show(ex.Message)
        Finally
            answer = Nothing
        End Try

    End Sub

    'Allow user to browse and select a picture
    Private Function UploadImage() As Bitmap 'Image
        Dim pickImageDialog As New OpenFileDialog
        Dim picture As Image = Nothing
        'Dim picture As Bitmap = Nothing
        Dim user As String = Environment.UserName ' currently logged user
        Try
            pickImageDialog.Title = "Please chose a picture."
            pickImageDialog.InitialDirectory = "C:\Users\" & user & "\Desktop"
            pickImageDialog.Filter = "Bitmap|*.bmp|JPEG|*.jpg" ' file type filters           
            If pickImageDialog.ShowDialog = Windows.Forms.DialogResult.Cancel Then Return Nothing
            picture = Image.FromFile(pickImageDialog.FileName)
            'picture = CType(Image.FromFile(pickImageDialog.FileName), Bitmap)
        Catch ex As Exception
            MessageBox.Show(ex.Message)
        Finally
            pickImageDialog.Dispose()
        End Try

        Return picture
    End Function

    'Trigger Button Clicked event in the Update Column
    Private Sub customerDataGridView_CellMouseClick(sender As Object, e As DataGridViewCellMouseEventArgs) Handles customerDataGridView.CellMouseClick
        If e.ColumnIndex = 11 Then 'index of the last column with Update button
            Dim answer As DialogResult
            Try
                answer = MessageBox.Show("Would you like to update member " &
                              customerDataGridView.Rows(e.RowIndex).Cells(0).Value & "?", "Update", MessageBoxButtons.YesNo)
                If answer = DialogResult.Yes Then
                    Dim updateRow As DataGridViewRow = customerDataGridView.Rows(e.RowIndex)
                    If ValidateMember(updateRow) Then 'validate input
                        UpdateDatabase(updateRow)
                    End If
                End If
            Catch ex As Exception
                MessageBox.Show(ex.Message)
            End Try
        End If
    End Sub

    'Update values of a given row
    Private Sub UpdateDatabase(memberRow As DataGridViewRow)
        Try
            Using entities = New video_dbEntities()
                Dim id As Integer = CInt(memberRow.Cells(0).Value)
                Dim customer As member = (From c In entities.members Where c.memberID = id
                                          Select c).FirstOrDefault()

                customer.memberID = memberRow.Cells(0).Value
                customer.firstName = memberRow.Cells(1).Value
                customer.lastName = memberRow.Cells(2).Value
                customer.city = memberRow.Cells(3).Value
                customer.zip = memberRow.Cells(4).Value
                customer.street = memberRow.Cells(5).Value
                customer.number = memberRow.Cells(6).Value
                customer.email = memberRow.Cells(7).Value
                customer.currentlyHiring = memberRow.Cells(8).Value
                customer.balance = memberRow.Cells(9).Value
                customer.picture = memberRow.Cells(10).Value
                entities.SaveChanges()
            End Using
        Catch ex As Exception
            MessageBox.Show(ex.Message)
        End Try
    End Sub
End Class

'End Namespace
